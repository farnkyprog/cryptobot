from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import json
import os

API_TOKEN = "5245769074:AAHpskqOMOfpqpkXbBCYNn4zZUagbJDKFew"
JSON_DATA = "data.json"

user = "@TreeOfLife_one" # Admin

if not os.path.exists(JSON_DATA):
    open("data.json", "w", encoding="utf8").write(r"{}")

bot = Bot(token=API_TOKEN, parse_mode="html")
dp  = Dispatcher(bot)

# Text and buttons, count of buttons must be equals to count of btns_text
start_text = "üö∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é."
buttons    = ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üí≤ –¢–∞—Ä–∏—Ñ—ã", "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø"]
btns_text  = ["""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º –∫–ª—É–±–µ Rich Signals, –∏ —á—Ç–æ –≤ –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç: 

1‚É£ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å–ø–æ—Ç –∏ —Ñ—å—é—á–µ—Ä—Å—ã; 
2‚É£ DeFi, NFT –∏ GameFi; 
3‚É£ –§–∞—Ä–º–∏–Ω–≥, –ø—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, —Å—Ç–µ–π–∫–∏–Ω–≥; 
4‚É£ –ê–∏—Ä–¥—Ä–æ–ø—ã, –≤–∞–π—Ç–ª–∏—Å—Ç—ã, —Ö–∞–ª—è–≤–Ω—ã–µ —Ç–µ–º—ã —Å –º–∞–π–Ω–∏–Ω–≥–æ–º –∏ –∫—Ä–∏–ø—Ç–æ –∏–≥—Ä—ã; 
5‚É£ –ó–∞—Ö–æ–¥—ã –≤ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ (Seed, Private —Å—Ç–∞–¥–∏–∏); 
6‚É£ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∫–∏,—Ç–µ—Å–Ω–µ—Ç—ã –∏ –Ω–æ–¥—ã; 
7‚É£ –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã; 
8‚É£ –°—Ç–∞—Ç—å–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ; 
9‚É£ –ß–∞—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É—Ç;
‚ÜóÔ∏è –ú–æ—ë –ª–∏—á–Ω–æ–µ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ.""", """üí≤ <b>–¢–∞—Ä–∏—Ñ—ã:</b>

üëâ 50$ 2 –º–µ—Å—è—Ü–∞ 
üëâ 100$ 6 –º–µ—Å—è—Ü–µ–≤ 
üëâ 150$ –≥–æ–¥ 
üëâ 200$ –Ω–∞–≤—Å–µ–≥–¥–∞""", f"<b>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:</b> {user}"]

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton(buttons[0]))
menu.add(KeyboardButton(buttons[1]), KeyboardButton(buttons[2]))


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await bot.send_message(message.chat.id, text=start_text, reply_markup=menu)
    # check user
    uid = message.chat.id
    users = json.load(open(JSON_DATA, "r", encoding="utf8"))
    if not uid in users:
        users[uid] = [message.chat.first_name, message.chat.last_name, message.chat.username]
        json.dump(users, open(JSON_DATA, "w", encoding="utf8"), indent=4)


@dp.message_handler()
async def handler(message: types.Message):
    chat_id = message.chat.id
    try:
        for i in range(0, len(buttons)):
            if message.text == buttons[i]:
                await bot.send_message(chat_id, btns_text[i], reply_markup=menu)
    except Exception as e:
        print(e)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
